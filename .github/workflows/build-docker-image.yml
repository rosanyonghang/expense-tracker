name: Build docker image

on:
  push:
    branches:
      - develop

jobs:
  build:
    runs-on: 'develop'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Choose env values based on env
      run: |
        if [ "$GITHUB_REF" = "refs/heads/develop" ]; then
          echo "Deploying to Development environment"
          cp env.dev .env
        else
          echo "No deployment needed for this branch"
        fi
#    - name: Stop app if running
#      run: pm2 stop LiveGalerie
    #   continue-on-error: true
    # - name: cache npm dependencies
    #   uses: actions/cache@v3
    #   id: cache-primes
    #   with:
    #     path: node_modules
    #     key: ${{ runner.os }}-npm-v3-${{ hashFiles('package-lock.json') }}
    # - name: Run npm install
    #   if: steps.cache-primes.outputs.cache-hit != 'true'
    #   run: npm install
    # - name: Run npm build
    #   run: npm run build
    # - name: Run the app again
    #   run: npm run start:prod
    # - name: completed setup
    #   run: echo "setup complete"
    - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          # relative path to the place where source code with Dockerfile is located
          context: ./
          # Note: tags has to be all lower-case
          tags: ghcr.io/rosanyonghang/expense-tracker:latest
          # build on feature branches, push only on main branch
          push: ${{ github.ref == 'refs/heads/master' }}
      - name: Run server script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_FOLDER_PATH }}
            sh deploy.sh
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
